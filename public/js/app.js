// Generated by CoffeeScript 1.7.1
$(function() {
  var $Html, $Input, $Md;
  $Md = $('#MdSave');
  $Html = $('#HtmlSave');
  $Input = $('#Inputview');
  return $Input.keyup(function() {
    var blob, html, markdown;
    markdown = $Input.html().replace(/<br>gi/, '\n').replace(/<div>/gi, '\n').replace(/<\/div>/gi, '');
    blob = new Blob([markdown], {
      type: "text/plain"
    });
    $Md.attr('href', window.URL.createObjectURL(blob)).attr("download", "file.md");
    html = new Blob([marked(markdown)], {
      type: "text/plain"
    });
    return $Html.attr('href', window.URL.createObjectURL(html)).attr("download", "file.html");
  });
});

$(function() {
  var $Input, $Type, $Zen, $ZenView, key, linebreak, typeMode;
  $Zen = $('#Zen');
  $ZenView = $('#ZenView');
  $Type = $('#Typewriter');
  $Input = $('#Inputview');
  $Zen.click(function() {
    var target;
    target = document.getElementById('ZenView');
    $ZenView.addClass('fullscreen');
    if (target.webkitRequestFullscreen) {
      return target.webkitRequestFullscreen();
    } else if (target.mozRequestFullScreen) {
      return target.mozRequestFullScreen();
    } else if (target.msRequestFullscreen) {
      return target.msRequestFullscreen();
    } else {
      if (target.requestFullscreen) {
        return target.requestFullscreen();
      }
    }
  });
  typeMode = false;
  key = new Audio('/sound/key.mp3');
  linebreak = new Audio('/sound/linebreak.mp3');
  $Type.click(function() {
    return typeMode ^= true;
  });
  return $Input.keydown(function(e) {
    if (!typeMode) {
      return;
    }
    if (e.keyCode === 13) {
      linebreak.play();
      return linebreak = new Audio(linebreak.src);
    } else {
      key.play();
      return key = new Audio(key.src);
    }
  });
});

$(function() {
  var $Create;
  $Create = $('#Create');
  return $Create.click(function(e) {
    return $.getJSON('/create', null, function(json) {
      return location.href = "/" + json.page;
    });
  });
});

$(function() {
  var $Input, path, save, socket;
  path = window.location.pathname.split("/")[1];
  if (path === "") {
    return;
  }
  socket = io.connect();
  $Input = $('#Inputview');
  $Input.keypress(function(e) {
    if (e.keyCode !== 13) {
      return;
    }
    return save();
  });
  $Input.focusout(function(e) {
    return save();
  });
  return save = function() {
    var source;
    source = $Input.html();
    return socket.emit('update', {
      path: path,
      md: source
    });
  };
});

$(function() {
  var $Input, $Preview, compile, source;
  document.execCommand('defaultParagraphSeparator', false, '');
  $Input = $('#Inputview');
  $Preview = $('#Preview');
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: true
  });
  source = "";
  if ($Input.length) {
    $(document).ready(function() {
      return compile();
    });
  }
  $Input.keyup(function(e) {
    return setTimeout(function() {
      return compile();
    }, 200);
  });
  $Input.on('paste', function(e) {
    return setTimeout(function() {
      return compile();
    }, 200);
  });
  return compile = function() {
    var html;
    source = $Input.html().replace(/&nbsp;/gi, ' ').replace(/<br>/gi, '\n').replace(/<div>/gi, '\n').replace(/<\/div>/gi, '');
    html = marked(source);
    $Preview.html(html);
    return $('pre code').each(function(i, e) {
      return hljs.highlightBlock(e);
    });
  };
});
